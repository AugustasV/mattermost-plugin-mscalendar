// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-plugin-mscalendar/server/api (interfaces: API)

// Package mock_api is a generated GoMock package.
package mock_api

import (
	gomock "github.com/golang/mock/gomock"
	remote "github.com/mattermost/mattermost-plugin-mscalendar/server/remote"
	store "github.com/mattermost/mattermost-plugin-mscalendar/server/store"
	bot "github.com/mattermost/mattermost-plugin-mscalendar/server/utils/bot"
	model "github.com/mattermost/mattermost-server/v5/model"
	reflect "reflect"
	time "time"
)

// MockAPI is a mock of API interface
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// AcceptEvent mocks base method
func (m *MockAPI) AcceptEvent(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptEvent indicates an expected call of AcceptEvent
func (mr *MockAPIMockRecorder) AcceptEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptEvent", reflect.TypeOf((*MockAPI)(nil).AcceptEvent), arg0)
}

// CompleteOAuth2 mocks base method
func (m *MockAPI) CompleteOAuth2(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteOAuth2", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteOAuth2 indicates an expected call of CompleteOAuth2
func (mr *MockAPIMockRecorder) CompleteOAuth2(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteOAuth2", reflect.TypeOf((*MockAPI)(nil).CompleteOAuth2), arg0, arg1, arg2)
}

// CreateCalendar mocks base method
func (m *MockAPI) CreateCalendar(arg0 *remote.Calendar) (*remote.Calendar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCalendar", arg0)
	ret0, _ := ret[0].(*remote.Calendar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCalendar indicates an expected call of CreateCalendar
func (mr *MockAPIMockRecorder) CreateCalendar(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCalendar", reflect.TypeOf((*MockAPI)(nil).CreateCalendar), arg0)
}

// CreateEvent mocks base method
func (m *MockAPI) CreateEvent(arg0 *remote.Event, arg1 []string) (*remote.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", arg0, arg1)
	ret0, _ := ret[0].(*remote.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvent indicates an expected call of CreateEvent
func (mr *MockAPIMockRecorder) CreateEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockAPI)(nil).CreateEvent), arg0, arg1)
}

// CreateUserEventSubscription mocks base method
func (m *MockAPI) CreateUserEventSubscription() (*store.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserEventSubscription")
	ret0, _ := ret[0].(*store.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserEventSubscription indicates an expected call of CreateUserEventSubscription
func (mr *MockAPIMockRecorder) CreateUserEventSubscription() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserEventSubscription", reflect.TypeOf((*MockAPI)(nil).CreateUserEventSubscription))
}

// Debugf mocks base method
func (m *MockAPI) Debugf(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugf", varargs...)
}

// Debugf indicates an expected call of Debugf
func (mr *MockAPIMockRecorder) Debugf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*MockAPI)(nil).Debugf), varargs...)
}

// DeclineEvent mocks base method
func (m *MockAPI) DeclineEvent(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeclineEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeclineEvent indicates an expected call of DeclineEvent
func (mr *MockAPIMockRecorder) DeclineEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeclineEvent", reflect.TypeOf((*MockAPI)(nil).DeclineEvent), arg0)
}

// DeleteCalendar mocks base method
func (m *MockAPI) DeleteCalendar(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCalendar", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCalendar indicates an expected call of DeleteCalendar
func (mr *MockAPIMockRecorder) DeleteCalendar(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCalendar", reflect.TypeOf((*MockAPI)(nil).DeleteCalendar), arg0)
}

// DeleteOrphanedSubscription mocks base method
func (m *MockAPI) DeleteOrphanedSubscription(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrphanedSubscription", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrphanedSubscription indicates an expected call of DeleteOrphanedSubscription
func (mr *MockAPIMockRecorder) DeleteOrphanedSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrphanedSubscription", reflect.TypeOf((*MockAPI)(nil).DeleteOrphanedSubscription), arg0)
}

// DeleteUserEventSubscription mocks base method
func (m *MockAPI) DeleteUserEventSubscription() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserEventSubscription")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserEventSubscription indicates an expected call of DeleteUserEventSubscription
func (mr *MockAPIMockRecorder) DeleteUserEventSubscription() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserEventSubscription", reflect.TypeOf((*MockAPI)(nil).DeleteUserEventSubscription))
}

// DisconnectUser mocks base method
func (m *MockAPI) DisconnectUser(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisconnectUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisconnectUser indicates an expected call of DisconnectUser
func (mr *MockAPIMockRecorder) DisconnectUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisconnectUser", reflect.TypeOf((*MockAPI)(nil).DisconnectUser), arg0)
}

// Errorf mocks base method
func (m *MockAPI) Errorf(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorf", varargs...)
}

// Errorf indicates an expected call of Errorf
func (mr *MockAPIMockRecorder) Errorf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockAPI)(nil).Errorf), varargs...)
}

// FindMeetingTimes mocks base method
func (m *MockAPI) FindMeetingTimes(arg0 *remote.FindMeetingTimesParameters) (*remote.MeetingTimeSuggestionResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMeetingTimes", arg0)
	ret0, _ := ret[0].(*remote.MeetingTimeSuggestionResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMeetingTimes indicates an expected call of FindMeetingTimes
func (mr *MockAPIMockRecorder) FindMeetingTimes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMeetingTimes", reflect.TypeOf((*MockAPI)(nil).FindMeetingTimes), arg0)
}

// GetMattermostUser mocks base method
func (m *MockAPI) GetMattermostUser(arg0 string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMattermostUser", arg0)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMattermostUser indicates an expected call of GetMattermostUser
func (mr *MockAPIMockRecorder) GetMattermostUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMattermostUser", reflect.TypeOf((*MockAPI)(nil).GetMattermostUser), arg0)
}

// GetRemoteUser mocks base method
func (m *MockAPI) GetRemoteUser(arg0 string) (*remote.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteUser", arg0)
	ret0, _ := ret[0].(*remote.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteUser indicates an expected call of GetRemoteUser
func (mr *MockAPIMockRecorder) GetRemoteUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteUser", reflect.TypeOf((*MockAPI)(nil).GetRemoteUser), arg0)
}

// GetUserAvailabilities mocks base method
func (m *MockAPI) GetUserAvailabilities(arg0 string, arg1 []string) ([]*remote.ScheduleInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAvailabilities", arg0, arg1)
	ret0, _ := ret[0].([]*remote.ScheduleInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAvailabilities indicates an expected call of GetUserAvailabilities
func (mr *MockAPIMockRecorder) GetUserAvailabilities(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAvailabilities", reflect.TypeOf((*MockAPI)(nil).GetUserAvailabilities), arg0, arg1)
}

// GetUserCalendars mocks base method
func (m *MockAPI) GetUserCalendars(arg0 string) ([]*remote.Calendar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCalendars", arg0)
	ret0, _ := ret[0].([]*remote.Calendar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCalendars indicates an expected call of GetUserCalendars
func (mr *MockAPIMockRecorder) GetUserCalendars(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCalendars", reflect.TypeOf((*MockAPI)(nil).GetUserCalendars), arg0)
}

// GetUserTimezone mocks base method
func (m *MockAPI) GetUserTimezone(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTimezone", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTimezone indicates an expected call of GetUserTimezone
func (mr *MockAPIMockRecorder) GetUserTimezone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTimezone", reflect.TypeOf((*MockAPI)(nil).GetUserTimezone), arg0)
}

// Infof mocks base method
func (m *MockAPI) Infof(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Infof", varargs...)
}

// Infof indicates an expected call of Infof
func (mr *MockAPIMockRecorder) Infof(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infof", reflect.TypeOf((*MockAPI)(nil).Infof), varargs...)
}

// InitOAuth2 mocks base method
func (m *MockAPI) InitOAuth2(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitOAuth2", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitOAuth2 indicates an expected call of InitOAuth2
func (mr *MockAPIMockRecorder) InitOAuth2(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitOAuth2", reflect.TypeOf((*MockAPI)(nil).InitOAuth2), arg0)
}

// IsAuthorizedAdmin mocks base method
func (m *MockAPI) IsAuthorizedAdmin(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAuthorizedAdmin", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAuthorizedAdmin indicates an expected call of IsAuthorizedAdmin
func (mr *MockAPIMockRecorder) IsAuthorizedAdmin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthorizedAdmin", reflect.TypeOf((*MockAPI)(nil).IsAuthorizedAdmin), arg0)
}

// ListRemoteSubscriptions mocks base method
func (m *MockAPI) ListRemoteSubscriptions() ([]*remote.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRemoteSubscriptions")
	ret0, _ := ret[0].([]*remote.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRemoteSubscriptions indicates an expected call of ListRemoteSubscriptions
func (mr *MockAPIMockRecorder) ListRemoteSubscriptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRemoteSubscriptions", reflect.TypeOf((*MockAPI)(nil).ListRemoteSubscriptions))
}

// LoadUserEventSubscription mocks base method
func (m *MockAPI) LoadUserEventSubscription() (*store.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadUserEventSubscription")
	ret0, _ := ret[0].(*store.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadUserEventSubscription indicates an expected call of LoadUserEventSubscription
func (mr *MockAPIMockRecorder) LoadUserEventSubscription() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadUserEventSubscription", reflect.TypeOf((*MockAPI)(nil).LoadUserEventSubscription))
}

// MakeClient mocks base method
func (m *MockAPI) MakeClient() (remote.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeClient")
	ret0, _ := ret[0].(remote.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeClient indicates an expected call of MakeClient
func (mr *MockAPIMockRecorder) MakeClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeClient", reflect.TypeOf((*MockAPI)(nil).MakeClient))
}

// MakeSuperuserClient mocks base method
func (m *MockAPI) MakeSuperuserClient() (remote.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeSuperuserClient")
	ret0, _ := ret[0].(remote.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeSuperuserClient indicates an expected call of MakeSuperuserClient
func (mr *MockAPIMockRecorder) MakeSuperuserClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeSuperuserClient", reflect.TypeOf((*MockAPI)(nil).MakeSuperuserClient))
}

// RenewUserEventSubscription mocks base method
func (m *MockAPI) RenewUserEventSubscription() (*store.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenewUserEventSubscription")
	ret0, _ := ret[0].(*store.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenewUserEventSubscription indicates an expected call of RenewUserEventSubscription
func (mr *MockAPIMockRecorder) RenewUserEventSubscription() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewUserEventSubscription", reflect.TypeOf((*MockAPI)(nil).RenewUserEventSubscription))
}

// RespondToEvent mocks base method
func (m *MockAPI) RespondToEvent(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RespondToEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RespondToEvent indicates an expected call of RespondToEvent
func (mr *MockAPIMockRecorder) RespondToEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RespondToEvent", reflect.TypeOf((*MockAPI)(nil).RespondToEvent), arg0, arg1)
}

// SyncStatusForAllUsers mocks base method
func (m *MockAPI) SyncStatusForAllUsers() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncStatusForAllUsers")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncStatusForAllUsers indicates an expected call of SyncStatusForAllUsers
func (mr *MockAPIMockRecorder) SyncStatusForAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncStatusForAllUsers", reflect.TypeOf((*MockAPI)(nil).SyncStatusForAllUsers))
}

// SyncStatusForSingleUser mocks base method
func (m *MockAPI) SyncStatusForSingleUser(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncStatusForSingleUser", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncStatusForSingleUser indicates an expected call of SyncStatusForSingleUser
func (mr *MockAPIMockRecorder) SyncStatusForSingleUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncStatusForSingleUser", reflect.TypeOf((*MockAPI)(nil).SyncStatusForSingleUser), arg0)
}

// TentativelyAcceptEvent mocks base method
func (m *MockAPI) TentativelyAcceptEvent(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TentativelyAcceptEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// TentativelyAcceptEvent indicates an expected call of TentativelyAcceptEvent
func (mr *MockAPIMockRecorder) TentativelyAcceptEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TentativelyAcceptEvent", reflect.TypeOf((*MockAPI)(nil).TentativelyAcceptEvent), arg0)
}

// ViewCalendar mocks base method
func (m *MockAPI) ViewCalendar(arg0, arg1 time.Time) ([]*remote.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewCalendar", arg0, arg1)
	ret0, _ := ret[0].([]*remote.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewCalendar indicates an expected call of ViewCalendar
func (mr *MockAPIMockRecorder) ViewCalendar(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewCalendar", reflect.TypeOf((*MockAPI)(nil).ViewCalendar), arg0, arg1)
}

// Warnf mocks base method
func (m *MockAPI) Warnf(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warnf", varargs...)
}

// Warnf indicates an expected call of Warnf
func (mr *MockAPIMockRecorder) Warnf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warnf", reflect.TypeOf((*MockAPI)(nil).Warnf), varargs...)
}

// With mocks base method
func (m *MockAPI) With(arg0 bot.LogContext) bot.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "With", arg0)
	ret0, _ := ret[0].(bot.Logger)
	return ret0
}

// With indicates an expected call of With
func (mr *MockAPIMockRecorder) With(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockAPI)(nil).With), arg0)
}
